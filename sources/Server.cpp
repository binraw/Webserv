


/*============================================================================*/
							/*### HEADER FILES ###*/
/*============================================================================*/
#include "../includes/webserv.hpp"
#include "Cluster.hpp"

/*============================================================================*/
			/*### CONSTRUCTORS - DESTRUCTOR _ OVERLOAD OPERATORS ###*/
/*============================================================================*/

Server::Server(const std::vector<std::string> &, Cluster & )
  :	_backLog(1024)
{
	UtilParsing::convertVectorToSet(_nameList, _config._serverName);
	UtilParsing::convertVectorToSet(_service, _config._listenPort);
	for (std::vector<LocationConfig>::const_iterator it = _config._locationConfig.begin();
		it != _config._locationConfig.end(); it++) {
			this->_locationPath.insert(it->_path);
			}
}
/*----------------------------------------------------------------------------*/

Server::Server(const Server & ref)
  : _backLog(ref._backLog)
{	}
/*----------------------------------------------------------------------------*/

/*============================================================================*/
                        /*### DESTRUCTORS ###*/
/*============================================================================*/

Server::~Server() 
{	}
/*----------------------------------------------------------------------------*/

/*============================================================================*/
                    /*### OVERLOAD OPERATOR ###*/
/*============================================================================*/
Server  & Server::operator=(const Server &)
{ return *this; }
/*----------------------------------------------------------------------------*/

std::ostream	& operator<<(std::ostream & o, const Server & ref)
{
	o	<< BOLD BRIGHT_CYAN "SERVER:\n" << std::endl
		<< BOLD BRIGHT_CYAN "_backlog: " RESET CYAN << ref.getBacklog()
		<< std::endl;

	return o << RESET;
}
/*----------------------------------------------------------------------------*/

/*============================================================================*/
						/*### PUBLIC METHODS ###*/
/*============================================================================*/

const int	& Server::getBacklog() const {
	return _backLog;
}
/*----------------------------------------------------------------------------*/

const std::set<std::string>	& Server::getNameList() const {
	return const_cast<std::set<std::string> &>(_nameList);
}
/*----------------------------------------------------------------------------*/

/*============================================================================*/
						/*### PRIVATE METHODS ###*/
/*============================================================================*/
void	Server::setNameList(std::vector<std::string> &)
{}
/*----------------------------------------------------------------------------*/

/*============================================================================*/
                        /*### PUBLIC METHODS ###*/
/*============================================================================*/

/*----------------------------------------------------------------------------*/

/*============================================================================*/
							/*### EXCEPTIONS ###*/
/*============================================================================*/
