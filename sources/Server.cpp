


/*============================================================================*/
                        /*### HEADER FILES ###*/
/*============================================================================*/
#include "../includes/webserv.hpp"
#include "Cluster.hpp"

/*============================================================================*/
                    /*### CONSTRUCTORS (DEFAULT & COPY) ###*/
/*============================================================================*/

Server::Server(const std::vector<std::string> &, Cluster & )
  :	_backLog(1024)
{
	// setSocket(current);
}
/*----------------------------------------------------------------------------*/

Server::Server(const Server & ref)
  : _backLog(ref._backLog)
{	}
/*----------------------------------------------------------------------------*/

/*============================================================================*/
                        /*### DESTRUCTORS ###*/
/*============================================================================*/

Server::~Server() 
{	}
/*----------------------------------------------------------------------------*/

/*============================================================================*/
                    /*### OVERLOAD OPERATOR ###*/
/*============================================================================*/
Server  & Server::operator=(const Server &)
{ return *this; }
/*----------------------------------------------------------------------------*/

std::ostream	& operator<<(std::ostream & o, const Server & ref)
{
	o	<< BOLD BRIGHT_CYAN "SERVER:\n" << std::endl
		<< BOLD BRIGHT_CYAN "_backlog: " RESET CYAN << ref.getBacklog()
		<< std::endl;

	return o << RESET;
}
/*----------------------------------------------------------------------------*/

/*============================================================================*/
                        	/*### GETTER ###*/
/*============================================================================*/

const int	& Server::getBacklog() const {
	return _backLog;
}
/*----------------------------------------------------------------------------*/

const std::set<std::string>	& Server::getNameList() const {
	return const_cast<std::set<std::string> &>(_nameList);
}
/*----------------------------------------------------------------------------*/

/*============================================================================*/
                        /*### PRIVATE METHODS ###*/
/*============================================================================*/

void	Server::setParams(std::vector<std::string> &)
{
	/* code */
}
/*----------------------------------------------------------------------------*/

/*============================================================================*/
                        /*### PUBLIC METHODS ###*/
/*============================================================================*/

/*----------------------------------------------------------------------------*/

/*============================================================================*/
                            /*### EXCEPTIONS ###*/
/*============================================================================*/
