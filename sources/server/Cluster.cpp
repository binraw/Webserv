

#include <iostream>

/*============================================================================*/
                        /*### HEADER FILES ###*/
/*============================================================================*/

#include "Cluster.hpp"

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>


/*============================================================================*/
                    /*### INITIALISATION STATIC FIELD ###*/
/*============================================================================*/
std::map<std::string, std::vector<std::string>>  Cluster::_clusterParams {
    {"protocols_handle_by_webserv", {"http", "https"}}, // only check if protocole is handle, not init them !!
    {"numbers_of_cluster_to_initialize", {"2"}}, // a number that we need to atoi() the result
    {"numbers_of_servers_by_clusters", {"1", "4"}}, // each column represent the number of server by cluster
    {"", {""}}
};

/*----------------------------------------------------------------------------*/

/*============================================================================*/
                    /*### CONSTRUCTORS (DEFAULT & COPY) ###*/
/*============================================================================*/

Cluster::Cluster(const std::string & file)
{
    // exctract file in 
    // manage file
    std::cout   << "filepath : " << file << std::endl;
    int fd = open(file.c_str(), O_RDONLY | O_CLOEXEC);
    if (fd < 0)
        throw ;
    char buffer[4096] = {'\0'};
    if (read(fd, buffer, sizeof(buffer)) == -1)
        return 3;
    std::vector<std::string> vec = UtilParsing::split(std::string(buffer), std::string(" "));
    for (size_t i = 0; i < vec.size(); i++) {
        std::cout   << vec[i] << std::endl;
    }
    close(fd)

}
/*----------------------------------------------------------------------------*/

Cluster::Cluster(const Cluster & ref)
{   }
/*----------------------------------------------------------------------------*/

/*============================================================================*/
                        /*### DESTRUCTORS ###*/
/*============================================================================*/

Cluster::~Cluster()
{   }
/*----------------------------------------------------------------------------*/

/*============================================================================*/
                    /*### OVERLOAD OPERATOR ###*/
/*============================================================================*/

Cluster & Cluster::operator=(const Cluster & ref) const
{   }
/*----------------------------------------------------------------------------*/

std::ostream & operator<<(std::ostream & o, const Cluster & right)
{   }
/*----------------------------------------------------------------------------*/

/*============================================================================*/
                        /*### GETTER - SETTER ###*/
/*============================================================================*/

/*----------------------------------------------------------------------------*/

/*============================================================================*/
                        /*### PRIVATE METHODS ###*/
/*============================================================================*/
/*----------------------------------------------------------------------------*/

std::map<std::string, std::string>  & setInitInfo(const std::string & file) \
    throw(ClusterException)
{
    /*
        parsing fichier;
        remplir un model std::map qui contient tout les champs a extraire du fichier
        leve une exception si une erreur de parsing est detectee
    
        model std::map :
            - doit contenir le nombre de serveurs virtuel
    */
}
/*----------------------------------------------------------------------------*/

std::map<Server, int>               & setVirtualServer()
{


}
/*----------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------*/

/*============================================================================*/
                        /*### PUBLIC METHODS ###*/
/*============================================================================*/

/*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/

/*============================================================================*/
                            /*### EXCEPTIONS ###*/
/*============================================================================*/

const char *    Cluster::ClusterException::what() const throw() {
    return (ERROR"During Cluster initilization\n");
}
/*----------------------------------------------------------------------------*/

void            Cluster::ClusterException::display(std::string & msg) const throw()
{
    std::cerr   << RED ERROR
                << msg
                << RESET << std::endl;
}
/*----------------------------------------------------------------------------*/
