

/*============================================================================*/
								/*### HEADERS ###*/
/*============================================================================*/

#include "Client.hpp"
#include <unistd.h>

/*============================================================================*/
				/*### CONSTRUCTORS - DESTRUCTOR - OVERLOAD OP ###*/
/*============================================================================*/

Client::Client(const int)
  : _request(NULL)
{	}
/*----------------------------------------------------------------------------*/

Client::Client(const Client &) // Usefull ??
{	}
/*----------------------------------------------------------------------------*/

Client::~Client() {
    if (_request)
        delete _request;
}
/*----------------------------------------------------------------------------*/

Client	&Client::operator=(const Client &) // Usefull?
{ return *this; }
/*----------------------------------------------------------------------------*/

std::ostream & operator<<(std::ostream &o, const Client &ref)
{
	o	<< BOLD "CLIENT:\n" RESET
		<< "_request :\n" << ref.getRequest()
		<< std::endl;
	return o;
}
/*----------------------------------------------------------------------------*/

/*============================================================================*/
						/*### PUBLIC METHODS ###*/
/*============================================================================*/

const ARequest * Client::getRequest() const {
	return _request;
}
/*----------------------------------------------------------------------------*/

/*============================================================================*/
						/*### PRIVATE METHODS ###*/
/*============================================================================*/

/*----------------------------------------------------------------------------*/

/*============================================================================*/
							/*### EXCEPTIONS ###*/
/*============================================================================*/

/*----------------------------------------------------------------------------*/
